@page "/project/options"
@using Controllers
@using Service.Exceptions.ResourceServiceExceptions
@using Service.Models
@inject AdminProjectController _AdminProjectController
@inject TaskController _TaskController
@inject ResourceController _ResourceController
@inject UserController _UserController
@inject NavigationManager Navigation
@inject IJSRuntime JS

@rendermode InteractiveServer

<link href="styles/styleProjectList.css" rel="stylesheet"/>
<link href="styles/styleProjectModals.css" rel="stylesheet"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

<div class="page-header mb-4">
    <h3 class="project-title"><i class="bi bi-diagram-project me-2"></i>Project Management</h3>
    <p class="text-muted">Manage your projects, tasks and team members</p>
</div>

<div class="project-list-container">
    @if (projects != null && projects.Any())
    {
        <ul class="list-group">
            @foreach (var project in projects)
            {
                <li class="list-group-item">
                    <span><i class="bi bi-folder-fill me-2"></i>@project.Name</span>
                    <div class="button-container">
                        <button class="view-options-btn @GetButtonClass(project)"
                                @onclick="() => ShowProjectOptions(project)">
                            <i class="bi bi-gear-fill me-2"></i>View Options
                        </button>

                        <button class="btn-warning  @GetButtonClass(project)"
                                @onclick="() => ShowEditProjectModal(project)">
                            <i class="bi bi-pencil-fill me-2"></i>Edit Project
                        </button>

                        <button class="btn-danger btn-sm" @onclick="() => RemoveProject(project)">
                            <i class="bi bi-trash-fill me-2"></i>Remove Project
                        </button>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>No projects available.
        </div>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>@errorMessage
        <button type="button" class="btn-close float-end" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(selectedProjectName))
{
    <div class="project-options mt-3">
        <h5><i class="bi bi-folder-fill me-2"></i>@selectedProjectName Options</h5>
        <button class="btn-create-task" @onclick="ShowCreateTaskModal">
            <i class="bi bi-plus-circle-fill me-2"></i>Create Task
        </button>
        <button class="btn-secondary" @onclick="ShowAddMembersModal">
            <i class="bi bi-person-plus-fill me-2"></i>Add Members
        </button>
        <button class="btn-warning" @onclick="ShowTaskListModal">
            <i class="bi bi-list-check me-2"></i>Task List
        </button>
        <button class="btn btn-info" @onclick="ShowMemberListModal">
            <i class="bi bi-people-fill me-2"></i>Member List
        </button>
    </div>
}

@if (showCreateTaskModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="createTaskModal"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-plus-circle me-2"></i>Create Task</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseCreateTaskModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(taskErrorMessage))
                    {
                        <div class="alert alert-danger d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>@taskErrorMessage</span>
                            <button type="button" class="btn-close" @onclick="() => taskErrorMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(taskSuccessMessage))
                    {
                        <div class="alert alert-success d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-check-circle-fill me-2"></i>@taskSuccessMessage</span>
                            <button type="button" class="btn-close" @onclick="() => taskSuccessMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }
                    @if (showForceConfirm)
                    {
                        <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>
                                The resource is not available for the selected date. Do you want to force creating the task?
                            </span>
                            <div>
                                <button class="btn btn-secondary me-2" @onclick="CancelForce">Cancel</button>
                                <button class="btn btn-primary" @onclick="ForceCreateTask">Force Creating</button>
                            </div>
                        </div>
                    }



                    <EditForm Model="@newTask" OnValidSubmit="HandleCreateTaskSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="taskTitle" class="form-label"><i class="bi bi-type me-1"></i>Task Title</label>
                            <InputText id="taskTitle" class="form-control" @bind-Value="newTask.Title" required/>
                        </div>

                        <div class="mb-3">
                            <label for="taskDescription" class="form-label"><i class="bi bi-card-text me-1"></i>Description</label>
                            <InputTextArea id="taskDescription" class="form-control" @bind-Value="newTask.Description"/>
                        </div>

                        <div class="mb-3">
                            <label for="startDate" class="form-label"><i class="bi bi-calendar-date me-1"></i>Estimated
                                Start Date</label>
                            <InputDate id="startDate" class="form-control" @bind-Value="newTask.ExpectedStartDate"/>
                        </div>

                        <div class="mb-3">
                            <label for="duration" class="form-label"><i class="bi bi-clock me-1"></i>Duration
                                (Days)</label>
                            <InputNumber id="duration" class="form-control" @bind-Value="newTask.Duration"/>
                        </div>


                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-tools me-1"></i>Select Resources</label>
                            <div class="resource-container">
                                @if (availableResources != null && availableResources.Any())
                                {
                                    foreach (var resource in availableResources)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input"
                                                   id="@($"resource-{resource.Id}")"
                                                   @onchange="e => ToggleResourceSelection(e, resource.Id)"
                                                   checked="@selectedResourceIds.Contains(resource.Id)"/>
                                            <label class="form-check-label" for="@($"resource-{resource.Id}")">
                                                @resource.Name
                                            </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted"><i class="bi bi-info-circle me-1"></i>No resources available
                                    </p>
                                }
                            </div>
                        </div>


                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-arrow-left me-1"></i>Previous Tasks</label>
                            @if (taskList != null && taskList.Any())
                            {
                                <div class="card mb-2 task-selector-card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0"><i class="bi bi-link-45deg me-1"></i>Add Dependency</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row align-items-end">
                                            <div class="col-md-5">
                                                <label for="newPrevTask" class="form-label">Task</label>
                                                <select id="newPrevTask" class="form-control" @bind="newPreviousTaskId">
                                                    <option value="">-- Select Task --</option>
                                                    @foreach (var task in taskList)
                                                    {
                                                        <option value="@task.Id">@task.Title (ID: @task.Id)</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="newDependencyType" class="form-label">Dependency
                                                    Type</label>
                                                <select id="newDependencyType" class="form-control"
                                                        @bind="newDependencyType">
                                                    <option value="FS">Finish-to-Start (FS)</option>
                                                    <option value="SS">Start-to-Start (SS)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-info w-100"
                                                        @onclick="AddTaskToPreviousTasks">
                                                    <i class="bi bi-plus-lg me-1"></i>Add
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                @if (previousTaskIds.Any())
                                {
                                    <div class="mt-3">
                                        <h6><i class="bi bi-diagram-3 me-1"></i>Added Dependencies:</h6>
                                        <div class="list-group dependency-list">
                                            @for (var i = 0; i < previousTaskIds.Count; i++)
                                            {
                                                var index = i;
                                                var taskId = previousTaskIds[i];
                                                var depType = previousTaskDependencies[i];
                                                var taskTitle = taskList.FirstOrDefault(t => t.Id == taskId)?.Title ?? "Unknown Task";

                                                <div
                                                    class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong><i class="bi bi-check2-square me-1"></i>@taskTitle
                                                        </strong>
                                                        <span class="badge bg-secondary ms-2">
                                                            @if (depType == "FS")
                                                            {
                                                                <i class="bi bi-arrow-right me-1"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-arrow-up-right me-1"></i>
                                                            }
                                                            @depType
                                                        </span>
                                                    </div>
                                                    <button type="button" class="btn btn-sm btn-danger"
                                                            @onclick="() => RemovePreviousTask(index)">
                                                        <i class="bi bi-trash-fill me-1"></i>Remove
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted"><i class="bi bi-info-circle me-1"></i>No tasks available for
                                    dependencies</p>
                            }
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle me-1"></i>Create Task
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showEditTaskModal && selectedTaskToEdit != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="editTaskModal"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i>Edit Task</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseEditTaskModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(editTaskErrorMessage))
                    {
                        <div class="alert alert-danger d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>@editTaskErrorMessage</span>
                            <button type="button" class="btn-close" @onclick="() => editTaskErrorMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(editTaskSuccessMessage))
                    {
                        <div class="alert alert-success d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-check-circle-fill me-2"></i>@editTaskSuccessMessage</span>
                            <button type="button" class="btn-close"
                                    @onclick="() => editTaskSuccessMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }
                    @if (showEditForceConfirm)
                    {
                        <div class="alert alert-warning d-flex justify-content-between align-items-center" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>
                                The resource is not available for the selected date. Do you want to force editing the task?
                            </span>
                            <div>
                                <button class="btn btn-secondary me-2" @onclick="CancelEditForce">Cancel</button>
                                <button class="btn btn-primary" @onclick="ForceEditTask">Force Updating</button>
                            </div>
                        </div>
                    }

                    <EditForm Model="@selectedTaskToEdit" OnValidSubmit="HandleEditTaskSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="editTaskTitle" class="form-label"><i class="bi bi-type me-1"></i>Task
                                Title</label>
                            <InputText id="editTaskTitle" class="form-control" @bind-Value="selectedTaskToEdit.Title"
                                       readonly required/>
                        </div>

                        <div class="mb-3">
                            <label for="editTaskDescription" class="form-label"><i class="bi bi-card-text me-1"></i>Description</label>
                            <InputTextArea id="editTaskDescription" class="form-control"
                                           @bind-Value="selectedTaskToEdit.Description"/>
                        </div>

                        <div class="mb-3">
                            <label for="editStartDate" class="form-label"><i class="bi bi-calendar-date me-1"></i>Estimated
                                Start Date</label>
                            <InputDate id="editStartDate" class="form-control"
                                       @bind-Value="selectedTaskToEdit.ExpectedStartDate"/>
                        </div>

                        <div class="mb-3">
                            <label for="editDuration" class="form-label"><i class="bi bi-clock me-1"></i>Duration
                                (Days)</label>
                            <InputNumber id="editDuration" class="form-control" min="0"
                                         @bind-Value="selectedTaskToEdit.Duration"/>
                        </div>


                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-tools me-1"></i>Select Resources</label>
                            <div class="resource-container">
                                @if (availableResources != null && availableResources.Any())
                                {
                                    foreach (var resource in availableResources)
                                    {
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input"
                                                   id="@($"edit-resource-{resource.Id}")"
                                                   @onchange="e => ToggleEditResourceSelection(e, resource.Id)"
                                                   checked="@editSelectedResourceIds.Contains(resource.Id)"/>
                                            <label class="form-check-label" for="@($"edit-resource-{resource.Id}")">
                                                @resource.Name
                                            </label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-muted"><i class="bi bi-info-circle me-1"></i>No resources available
                                    </p>
                                }
                            </div>
                        </div>


                        <div class="mb-3">
                            <label class="form-label"><i class="bi bi-arrow-left me-1"></i>Previous Tasks</label>
                            @if (taskList != null && taskList.Any())
                            {
                                <div class="card mb-2 task-selector-card">
                                    <div class="card-header bg-light">
                                        <h6 class="mb-0"><i class="bi bi-link-45deg me-1"></i>Add Dependency</h6>
                                    </div>
                                    <div class="card-body">
                                        <div class="row align-items-end">
                                            <div class="col-md-5">
                                                <label for="editNewPrevTask" class="form-label">Task</label>
                                                <select id="editNewPrevTask" class="form-control"
                                                        @bind="editNewPreviousTaskId">
                                                    <option value="">-- Select Task --</option>
                                                    @foreach (var task in taskList.Where(t => t.Id != selectedTaskToEdit.Id))
                                                    {
                                                        <option value="@task.Id">@task.Title (ID: @task.Id)</option>
                                                    }
                                                </select>
                                            </div>
                                            <div class="col-md-4">
                                                <label for="editNewDependencyType" class="form-label">Dependency
                                                    Type</label>
                                                <select id="editNewDependencyType" class="form-control"
                                                        @bind="editNewDependencyType">
                                                    <option value="FS">Finish-to-Start (FS)</option>
                                                    <option value="SS">Start-to-Start (SS)</option>
                                                </select>
                                            </div>
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-info w-100"
                                                        @onclick="AddTaskToEditPreviousTasks">
                                                    <i class="bi bi-plus-lg me-1"></i>Add
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                @if (editPreviousTaskIds.Any())
                                {
                                    <div class="mt-3">
                                        <h6><i class="bi bi-diagram-3 me-1"></i>Added Dependencies:</h6>
                                        <div class="list-group dependency-list">
                                            @for (var i = 0; i < editPreviousTaskIds.Count; i++)
                                            {
                                                var index = i;
                                                var taskId = editPreviousTaskIds[i];
                                                var depType = editPreviousTaskDependencies[i];
                                                var taskTitle = taskList.FirstOrDefault(t => t.Id == taskId)?.Title ?? "Unknown Task";

                                                <div
                                                    class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong><i class="bi bi-check2-square me-1"></i>@taskTitle
                                                        </strong>
                                                        <span class="badge bg-secondary ms-2">
                                                            @if (depType == "FS")
                                                            {
                                                                <i class="bi bi-arrow-right me-1"></i>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-arrow-up-right me-1"></i>
                                                            }
                                                            @depType
                                                        </span>
                                                    </div>
                                                    <button type="button" class="btn btn-sm btn-danger"
                                                            @onclick="() => RemoveEditPreviousTask(index)">
                                                        <i class="bi bi-trash-fill me-1"></i>Remove
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted"><i class="bi bi-info-circle me-1"></i>No tasks available for
                                    dependencies</p>
                            }
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle me-1"></i>Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}


@if (showAddMembersModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="addMembersModal"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-person-plus-fill me-2"></i>Add Members to Project</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseAddMembersModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(memberErrorMessage))
                    {
                        <div class="alert alert-danger d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>@memberErrorMessage</span>
                            <button type="button" class="btn-close" @onclick="() => memberErrorMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(memberSuccessMessage))
                    {
                        <div class="alert alert-success d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-check-circle-fill me-2"></i>@memberSuccessMessage</span>
                            <button type="button" class="btn-close" @onclick="() => memberSuccessMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    <h6><i class="bi bi-people-fill me-2"></i>Select Members to Add</h6>
                    <div class="member-selection mb-3">
                        @if (membersList != null && membersList.Any())
                        {
                            foreach (var member in membersList)
                            {
                                <div class="form-check member-item">
                                    <input type="checkbox" class="form-check-input" id="@member.Email"
                                           @onchange="e => ToggleMemberSelection(e, member.Email)"/>
                                    <label class="form-check-label" for="@member.Email">
                                        <i class="bi bi-person me-1"></i>@member.FirstName @member.LastName
                                    </label>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted"><i class="bi bi-info-circle me-1"></i>No members available to add</p>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => CloseAddMembersModal(false)">
                        <i class="bi bi-x-circle me-1"></i>Close
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="AddSelectedMembers">
                        <i class="bi bi-person-plus-fill me-1"></i>Add Members
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@if (showAssignTaskToMemberModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="assignTaskToMemberModal"
         aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-person-gear me-2"></i>Manage Tasks for @selectedMemberName
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseAssignTaskToMemberModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(assignTaskErrorMessage))
                    {
                        <div class="alert alert-danger d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>@assignTaskErrorMessage</span>
                            <button type="button" class="btn-close"
                                    @onclick="() => assignTaskErrorMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(assignTaskSuccessMessage))
                    {
                        <div class="alert alert-success d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-check-circle-fill me-2"></i>@assignTaskSuccessMessage</span>
                            <button type="button" class="btn-close"
                                    @onclick="() => assignTaskSuccessMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }

                    <div class="row">

                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="bi bi-list-task me-1"></i>Available Tasks</h6>
                                </div>
                                <div class="card-body">
                                    @if (taskList != null && taskList.Any(t => !assignedTasks.Any(at => at.Id == t.Id)))
                                    {
                                        <div class="list-group task-list">
                                            @foreach (var task in taskList.Where(t => !assignedTasks.Any(at => at.Id == t.Id)))
                                            {
                                                <div
                                                    class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong><i class="bi bi-check2-square me-1"></i>@task.Title
                                                        </strong>
                                                        <small class="d-block text-muted">@task.Description</small>
                                                    </div>
                                                    <button class="btn btn-sm btn-success"
                                                            @onclick="() => AssignTaskToMember(task)">
                                                        <i class="bi bi-plus-circle me-1"></i>Assign
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted text-center py-3"><i class="bi bi-info-circle me-1"></i>No
                                            tasks available to assign</p>
                                    }
                                </div>
                            </div>
                        </div>


                        <div class="col-md-6">
                            <div class="card h-100">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0"><i class="bi bi-person-check me-1"></i>Assigned Tasks</h6>
                                </div>
                                <div class="card-body">
                                    @if (assignedTasks != null && assignedTasks.Any())
                                    {
                                        <div class="list-group task-list">
                                            @foreach (var task in assignedTasks)
                                            {
                                                <div
                                                    class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong><i class="bi bi-check2-square me-1"></i>@task.Title
                                                        </strong>
                                                        <small class="d-block text-muted">@task.Description</small>
                                                    </div>
                                                    <button class="btn btn-sm btn-danger"
                                                            @onclick="() => RemoveTaskFromMember(task)">
                                                        <i class="bi bi-trash-fill me-1"></i>Remove
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="text-muted text-center py-3"><i class="bi bi-info-circle me-1"></i>No
                                            tasks assigned to this member</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary"
                            @onclick="() => CloseAssignTaskToMemberModal(false)">
                        <i class="bi bi-x-circle me-1"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@if (showTaskListModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="taskListModal"
         aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-list-check me-2"></i>Task List - @selectedProjectName</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseTaskListModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (taskList != null && taskList.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover task-table">
                                <thead class="table-light">
                                <tr>
                                    <th><i class="bi bi-card-heading me-1"></i>Title</th>
                                    <th><i class="bi bi-card-text me-1"></i>Description</th>
                                    <th><i class="bi bi-calendar-date me-1"></i>Start Date</th>
                                    <th><i class="bi bi-clock me-1"></i>Duration</th>
                                    <th><i class="bi bi-flag me-1"></i>State</th>
                                    <th><i class="bi bi-gear me-1"></i>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var task in taskList)
                                {
                                    <tr>
                                        <td>@task.Title</td>
                                        <td>@task.Description</td>
                                        <td>@task.ExpectedStartDate.ToShortDateString()</td>
                                        <td>@task.Duration Days</td>
                                        <td>
                                            <span class="badge @GetStateClass(task.State)">@task.State</span>
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                @if (task.State != StateDTO.DONE)
                                                {
                                                    <button class="btn btn-sm btn-primary me-2"
                                                            @onclick="() => ShowEditTaskModal(task)">
                                                        <i class="bi bi-pencil-fill me-1"></i>Edit
                                                    </button>
                                                }
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveTask(task)">
                                                    <i class="bi bi-trash-fill me-1"></i>Remove
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-info-circle text-muted" style="font-size: 3rem;"></i>
                            <p class="mt-3">No tasks available for this project.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => CloseTaskListModal(false)">
                        <i class="bi bi-x-circle me-1"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@if (showMemberListModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="memberListModal"
         aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-people-fill me-2"></i>Member List - @selectedProjectName
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => CloseMemberListModal()"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (projectMembers != null && projectMembers.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover member-table">
                                <thead class="table-light">
                                <tr>
                                    <th><i class="bi bi-person me-1"></i>Member</th>
                                    <th><i class="bi bi-gear me-1"></i>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var member in projectMembers)
                                {
                                    <tr class="@(selectedMemberId == member.Email ? "table-primary" : "")">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="member-avatar">
                                                    <i class="bi bi-person-circle me-2" style="font-size: 1.5rem;"></i>
                                                </div>
                                                <div>
                                                    <strong>@member.FirstName @member.LastName</strong>
                                                    <small class="d-block text-muted">@member.Email</small>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="btn btn-sm btn-danger me-2"
                                                        @onclick="() => RemoveMember(member)">
                                                    <i class="bi bi-person-dash-fill me-1"></i>Remove Member
                                                </button>
                                                <button class="btn btn-sm btn-warning"
                                                        @onclick="() => ShowAssignTaskModal(member)">
                                                    <i class="bi bi-person-gear me-1"></i>Manage Tasks
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-info-circle text-muted" style="font-size: 3rem;"></i>
                            <p class="mt-3">No members found for this project.</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="() => CloseMemberListModal()">
                        <i class="bi bi-x-circle me-1"></i>Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}
<!-- Modal para editar el proyecto -->
@if (showEditProjectModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(0,0,0,0.5);"
         aria-labelledby="editProjectModal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-pencil-square me-2"></i>Edit Project</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseEditProjectModal(false)"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (!string.IsNullOrEmpty(projectErrorMessage))
                    {
                        <div class="alert alert-danger d-flex justify-content-between" role="alert">
                            <span><i class="bi bi-exclamation-triangle-fill me-2"></i>@projectErrorMessage</span>
                            <button type="button" class="btn-close" @onclick="() => projectErrorMessage = string.Empty"
                                    aria-label="Close"></button>
                        </div>
                    }
                    <EditForm Model="@selectedProjectToEdit" OnValidSubmit="HandleEditProjectSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <!-- Nombre del Proyecto -->
                        <div class="mb-3">
                            <label for="projectName" class="form-label">Project Name</label>
                            <InputText id="projectName" class="form-control" @bind-Value="selectedProjectToEdit.Name"
                                       readonly required/>
                        </div>

                        <!-- Descripción del Proyecto -->
                        <div class="mb-3">
                            <label for="projectDescription" class="form-label">Project Description</label>
                            <InputTextArea id="projectDescription" class="form-control"
                                           @bind-Value="selectedProjectToEdit.Description"/>
                        </div>

                        <!-- Sección de Project Leader -->
                        <div class="mb-3">
                            <label class="form-label">Project Leader</label>

                            @if (!string.IsNullOrEmpty(currentProjectLeaderEmail))
                            {
                                <!-- Mostrar leader actual con botón para remover -->
                                <div class="card border-primary">
                                    <div class="card-body p-3">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h6 class="card-title mb-1">
                                                    <i class="bi bi-person-badge-fill text-primary me-2"></i>Current
                                                    Leader
                                                </h6>
                                                <p class="card-text mb-0">
                                                    @GetLeaderDisplayName(currentProjectLeaderEmail)
                                                </p>
                                                <small class="text-muted">@currentProjectLeaderEmail</small>
                                            </div>
                                            <button type="button" class="btn btn-outline-danger btn-sm"
                                                    @onclick="RemoveCurrentLeader">
                                                <i class="bi bi-trash3 me-1"></i>Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <!-- Mostrar lista de leaders disponibles cuando no hay uno asignado -->
                                <div class="card border-success">
                                    <div class="card-body p-3">
                                        <div class="mb-3">
                                            <h6 class="card-title mb-2">
                                                <i class="bi bi-person-plus-fill text-success me-2"></i>Assign Project
                                                Leader
                                            </h6>
                                            <select class="form-select" @bind="selectedProjectLeaderEmail">
                                                <option value="">Select a Leader</option>
                                                @foreach (var user in projectLeadersUsers)
                                                {
                                                    <option value="@user.Email">@user.FirstName @user.LastName</option>
                                                }
                                            </select>
                                        </div>
                                        @if (!string.IsNullOrEmpty(selectedProjectLeaderEmail))
                                        {
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <div>
                                                    <strong>Selected:</strong> @GetLeaderDisplayName(selectedProjectLeaderEmail)
                                                </div>
                                                <button type="button" class="btn btn-success btn-sm"
                                                        @onclick="AssignSelectedLeader">
                                                    <i class="bi bi-check-circle me-1"></i>Assign Leader
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>

                                @if (projectLeadersUsers == null || !projectLeadersUsers.Any())
                                {
                                    <div class="alert alert-warning mt-2">
                                        <i class="bi bi-exclamation-triangle me-2"></i>No project leaders available.
                                    </div>
                                }
                            }
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="bi bi-check-circle me-1"></i>Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}



@code {

    private List<ProjectDTO> projects = new();
    private string selectedProjectName;
    private List<TaskDTO> taskList = new();
    private List<ResourceDTO> availableResources = new();
    private List<UserDTO> membersList = new();
    private List<UserDTO> membersProjectList = new();

    private bool showCreateTaskModal;
    private bool showEditTaskModal;
    private bool showAddMembersModal;
    private bool showAssignTaskToMemberModal;
    private bool showTaskListModal;
    private bool showMemberListModal;
    private bool showForceConfirm;
    private bool showEditForceConfirm;

    private string errorMessage = string.Empty;
    private string taskErrorMessage = string.Empty;
    private string taskSuccessMessage = string.Empty;
    private string editTaskErrorMessage = string.Empty;
    private string editTaskSuccessMessage = string.Empty;
    private string memberErrorMessage = string.Empty;
    private string memberSuccessMessage = string.Empty;
    private string assignTaskErrorMessage = string.Empty;
    private string assignTaskSuccessMessage = string.Empty;
    private string pendingProjectName;
    private string pendingEditProjectName;
    private string pendingEditOriginalTitle;

    private TaskDTO newTask = new();
    private TaskDTO pendingTask;
    private TaskDTO pendingEditTask;

    private readonly HashSet<int?> selectedResourceIds = new();
    private readonly List<int?> previousTaskIds = new();
    private readonly List<string> previousTaskDependencies = new();
    private int? newPreviousTaskId;
    private string newDependencyType = "FS";

    private TaskDTO selectedTaskToEdit;
    private readonly HashSet<int?> editSelectedResourceIds = new();
    private readonly List<int?> editPreviousTaskIds = new();
    private readonly List<string> editPreviousTaskDependencies = new();
    private int? editNewPreviousTaskId;
    private string editNewDependencyType = "FS";

    private readonly HashSet<string> selectedEmails = new();

    private string selectedMemberId;
    private string selectedMemberName;
    private List<TaskDTO> assignedTasks = new();
    private List<UserDTO> projectMembers = new();

    private bool showEditProjectModal;
    private ProjectDTO selectedProjectToEdit;
    private string selectedProjectLeaderEmail;
    private string currentProjectLeaderEmail;
    private string projectErrorMessage = string.Empty;
    private List<UserDTO> projectLeadersUsers = new();


    protected override async void OnInitialized()
    {
        LoadProjects();
        LoadUsers();

        if (projects != null && projects.Any())
        {
            var savedProjectName = await JS.InvokeAsync<string>("localStorage.getItem", "selectedProject");
            if (!string.IsNullOrEmpty(savedProjectName) && projects.Any(p => p.Name == savedProjectName))
            {
                selectedProjectName = savedProjectName;
                LoadTasks();
                LoadResources();
            }
        }
    }

    private void LoadProjects()
    {
        try
        {
            projects = _AdminProjectController.GetAllProjects();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading projects: {ex.Message}";
        }
    }

    private void LoadResources()
    {
        if (string.IsNullOrWhiteSpace(selectedProjectName))
        {
            availableResources = new List<ResourceDTO>();
            return;
        }

        try
        {
            availableResources = _ResourceController.GetAllResourcesForAProject(selectedProjectName);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading resources: {ex.Message}";
            availableResources = new List<ResourceDTO>();
        }
    }

    private void LoadTasks()
    {
        if (string.IsNullOrEmpty(selectedProjectName))
        {
            taskList = new List<TaskDTO>();
            return;
        }

        try
        {
            taskList = _TaskController.GetAllTasksForAProject(selectedProjectName);
            if (taskList == null)
            {
                taskList = new List<TaskDTO>();
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tasks: {ex.Message}";
            taskList = new List<TaskDTO>();
        }
    }

    private async void ShowProjectOptions(ProjectDTO project)
    {
        selectedProjectName = project.Name;
        errorMessage = string.Empty;
        await JS.InvokeVoidAsync("localStorage.setItem", "selectedProject", project.Name);
        LoadTasks();
        LoadResources();
    }

    public string GetButtonClass(ProjectDTO project)
    {
        return selectedProjectName == project.Name ? "selected" : "";
    }

    public string GetStateClass(StateDTO state)
    {
        return state switch
        {
            StateDTO.TODO => "bg-secondary",
            StateDTO.DOING => "bg-primary",
            StateDTO.DONE => "bg-success",
            _ => "bg-secondary"
        };
    }

    private void RemoveProject(ProjectDTO project)
    {
        try
        {
            _AdminProjectController.RemoveProject(project.Name);
            projects.Remove(project);

            if (selectedProjectName == project.Name)
            {
                selectedProjectName = string.Empty;
                taskList.Clear();
            }

            Navigation.NavigateTo(Navigation.Uri, true);
            JS.InvokeVoidAsync("localStorage.setItem", "selectedProject", null);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing project: {ex.Message}";
        }
    }

    private void ShowCreateTaskModal()
    {
        if (!string.IsNullOrEmpty(selectedProjectName))
        {
            LoadTasks();

            newTask = new TaskDTO
            {
                ExpectedStartDate = DateTime.Today,
                Duration = 1,
                Title = string.Empty,
                Description = string.Empty,
                PreviousTasks = new List<TaskDTO>(),
                SameTimeTasks = new List<TaskDTO>(),
                Resources = new List<ResourceDTO>(),
                State = StateDTO.TODO,
                Id = null
            };

            previousTaskIds.Clear();
            previousTaskDependencies.Clear();
            selectedResourceIds.Clear();
            newPreviousTaskId = null;
            newDependencyType = "FS";

            taskErrorMessage = string.Empty;
            taskSuccessMessage = string.Empty;

            showCreateTaskModal = true;
            StateHasChanged();
        }
        else
        {
            errorMessage = "Please select a project before creating a task.";
        }
    }

    private void CloseCreateTaskModal(bool refreshData)
    {
        showCreateTaskModal = false;
        if (refreshData)
        {
            LoadTasks();
            LoadResources();
        }
    }

    private void AddTaskToPreviousTasks()
    {
        if (newPreviousTaskId.HasValue)
        {
            previousTaskIds.Add(newPreviousTaskId);
            previousTaskDependencies.Add(newDependencyType);

            newPreviousTaskId = null;
            newDependencyType = "FS";
        }
        else
        {
            taskErrorMessage = "Please select a task to add as dependency";
        }
    }

    private async Task HandleCreateTaskSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedProjectName))
            {
                taskErrorMessage = "Please select a project before creating a task.";
                return;
            }

            if (string.IsNullOrEmpty(newTask.Title))
            {
                taskErrorMessage = "Task title is required.";
                return;
            }

            if (newTask.Duration <= 0)
            {
                taskErrorMessage = "Duration must be greater than 0.";
                return;
            }

            var previousTasksFS = new List<TaskDTO>();
            var sameTimeTasksSS = new List<TaskDTO>();

            for (var i = 0; i < previousTaskIds.Count; i++)
            {
                if (previousTaskIds[i].HasValue)
                {
                    var taskId = previousTaskIds[i].Value;

                    var taskDto = new TaskDTO { Id = taskId };

                    if (previousTaskDependencies[i] == "FS")
                    {
                        previousTasksFS.Add(taskDto);
                    }
                    else if (previousTaskDependencies[i] == "SS")
                    {
                        sameTimeTasksSS.Add(taskDto);
                    }
                }
            }

            if (newTask == null)
            {
                taskErrorMessage = "Task object is null";
                return;
            }

            newTask.PreviousTasks = previousTasksFS ?? new List<TaskDTO>();
            newTask.SameTimeTasks = sameTimeTasksSS ?? new List<TaskDTO>();

            newTask.Resources = availableResources?
                .Where(r => r != null && r.Id.HasValue && selectedResourceIds.Contains(r.Id))
                .ToList() ?? new List<ResourceDTO>();

            _TaskController.AddTaskToProject(selectedProjectName, newTask);
            taskSuccessMessage = "Task created successfully!";
            taskErrorMessage = string.Empty;

            await Task.Delay(1500);
            CloseCreateTaskModal(true);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
        catch (ResourceNotAvailableException)
        {
            pendingTask = newTask;
            pendingProjectName = selectedProjectName;
            showForceConfirm = true;
        }
        catch (Exception ex)
        {
            taskErrorMessage = $"Error creating task: {ex.Message}";
            taskSuccessMessage = string.Empty;
        }
    }

    private void CancelForce()
    {
        showForceConfirm = false;
        pendingTask = null;
        pendingProjectName = null;
        taskErrorMessage = string.Empty;
    }

    private async Task ForceCreateTask()
    {
        try
        {
            _TaskController.AddTaskToProject(pendingProjectName, pendingTask, true);
            taskSuccessMessage = "Task created (forced) successfully!";
            showForceConfirm = false;
            taskErrorMessage = string.Empty;

            await Task.Delay(1500);
            CloseCreateTaskModal(true);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
        catch (Exception ex)
        {
            taskErrorMessage = $"Error forcing task: {ex.Message}";
        }
    }

    private void ToggleResourceSelection(ChangeEventArgs e, int? resourceId)
    {
        if (e.Value is bool isSelected && resourceId.HasValue)
        {
            if (isSelected)
            {
                selectedResourceIds.Add(resourceId);
            }
            else
            {
                selectedResourceIds.Remove(resourceId);
            }
        }
    }

    private void RemovePreviousTask(int index)
    {
        if (index >= 0 && index < previousTaskIds.Count)
        {
            previousTaskIds.RemoveAt(index);
            previousTaskDependencies.RemoveAt(index);
        }
    }

    private void ShowEditTaskModal(TaskDTO task)
    {
        showTaskListModal = false;

        selectedTaskToEdit = new TaskDTO
        {
            Id = task.Id,
            Title = task.Title,
            Description = task.Description,
            ExpectedStartDate = task.ExpectedStartDate,
            Duration = task.Duration,
            State = task.State,
            PreviousTasks = task.PreviousTasks != null ? new List<TaskDTO>(task.PreviousTasks) : new List<TaskDTO>(),
            SameTimeTasks = task.SameTimeTasks != null ? new List<TaskDTO>(task.SameTimeTasks) : new List<TaskDTO>(),
            Resources = task.Resources != null ? new List<ResourceDTO>(task.Resources) : new List<ResourceDTO>()
        };

        editPreviousTaskIds.Clear();
        editPreviousTaskDependencies.Clear();
        editSelectedResourceIds.Clear();
        editNewPreviousTaskId = null;
        editNewDependencyType = "FS";

        if (selectedTaskToEdit.Resources != null)
        {
            foreach (var resource in selectedTaskToEdit.Resources)
            {
                editSelectedResourceIds.Add(resource.Id);
            }
        }

        if (selectedTaskToEdit.PreviousTasks != null)
        {
            foreach (var prevTask in selectedTaskToEdit.PreviousTasks)
            {
                if (prevTask.Id.HasValue)
                {
                    editPreviousTaskIds.Add(prevTask.Id);
                    editPreviousTaskDependencies.Add("FS");
                }
            }
        }

        if (selectedTaskToEdit.SameTimeTasks != null)
        {
            foreach (var sameTask in selectedTaskToEdit.SameTimeTasks)
            {
                if (sameTask.Id.HasValue)
                {
                    editPreviousTaskIds.Add(sameTask.Id);
                    editPreviousTaskDependencies.Add("SS");
                }
            }
        }

        editTaskErrorMessage = string.Empty;
        editTaskSuccessMessage = string.Empty;
        showEditTaskModal = true;
    }

    private void CloseEditTaskModal(bool refreshData)
    {
        showEditTaskModal = false;
        selectedTaskToEdit = null;
        if (refreshData)
        {
            LoadTasks();
            LoadResources();
        }
    }

    private void AddTaskToEditPreviousTasks()
    {
        if (editNewPreviousTaskId.HasValue)
        {
            editPreviousTaskIds.Add(editNewPreviousTaskId);
            editPreviousTaskDependencies.Add(editNewDependencyType);

            editNewPreviousTaskId = null;
            editNewDependencyType = "FS";
        }
        else
        {
            editTaskErrorMessage = "Please select a task to add as dependency";
        }
    }

    private async Task HandleEditTaskSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedProjectName))
            {
                editTaskErrorMessage = "Project not selected.";
                return;
            }

            if (string.IsNullOrEmpty(selectedTaskToEdit.Title))
            {
                editTaskErrorMessage = "Task title is required.";
                return;
            }

            if (selectedTaskToEdit.Duration <= 0)
            {
                editTaskErrorMessage = "Duration must be greater than 0.";
                return;
            }

            var previousTasksFS = new List<TaskDTO>();
            var sameTimeTasksSS = new List<TaskDTO>();

            for (var i = 0; i < editPreviousTaskIds.Count; i++)
            {
                if (editPreviousTaskIds[i].HasValue)
                {
                    var taskId = editPreviousTaskIds[i].Value;

                    var taskDto = new TaskDTO { Id = taskId };

                    if (editPreviousTaskDependencies[i] == "FS")
                    {
                        previousTasksFS.Add(taskDto);
                    }
                    else if (editPreviousTaskDependencies[i] == "SS")
                    {
                        sameTimeTasksSS.Add(taskDto);
                    }
                }
            }

            selectedTaskToEdit.PreviousTasks = previousTasksFS;
            selectedTaskToEdit.SameTimeTasks = sameTimeTasksSS;
            selectedTaskToEdit.Resources = availableResources
                .Where(r => r.Id.HasValue && editSelectedResourceIds.Contains(r.Id))
                .ToList();
            pendingEditOriginalTitle = selectedTaskToEdit.Title;
            pendingEditTask = selectedTaskToEdit;
            _TaskController.UpdateTask(selectedProjectName, selectedTaskToEdit.Title, selectedTaskToEdit);
            editTaskSuccessMessage = "Task updated successfully!";
            editTaskErrorMessage = string.Empty;

            await Task.Delay(1500);
            CloseEditTaskModal(true);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
        catch (ResourceNotAvailableException)
        {
            pendingEditProjectName = selectedProjectName;
            showEditForceConfirm = true;
        }
        catch (Exception ex)
        {
            editTaskErrorMessage = $"Error updating task: {ex.Message}";
            editTaskSuccessMessage = string.Empty;
        }
    }

    private void CancelEditForce()
    {
        showEditForceConfirm = false;
        pendingEditTask = null;
        pendingEditProjectName = null;
        pendingEditOriginalTitle = null;
        editTaskErrorMessage = string.Empty;
    }

    private async Task ForceEditTask()
    {
        try
        {
            _TaskController.UpdateTask(
                pendingEditProjectName,
                pendingEditOriginalTitle,
                pendingEditTask,
                true
            );
            editTaskSuccessMessage = "Task updated (forced) successfully!";
            showEditForceConfirm = false;
            taskErrorMessage = string.Empty;

            await Task.Delay(1500);
            CloseEditTaskModal(true);
            Navigation.NavigateTo(Navigation.Uri, true);
        }
        catch (Exception ex)
        {
            editTaskErrorMessage = $"Error forcing update: {ex.Message}";
        }
    }

    private void ToggleEditResourceSelection(ChangeEventArgs e, int? resourceId)
    {
        if (e.Value is bool isSelected && resourceId.HasValue)
        {
            if (isSelected)
            {
                editSelectedResourceIds.Add(resourceId);
            }
            else
            {
                editSelectedResourceIds.Remove(resourceId);
            }
        }
    }

    private void RemoveEditPreviousTask(int index)
    {
        if (index >= 0 && index < editPreviousTaskIds.Count)
        {
            editPreviousTaskIds.RemoveAt(index);
            editPreviousTaskDependencies.RemoveAt(index);
        }
    }

    private void RemoveTask(TaskDTO task)
    {
        try
        {
            _TaskController.DeleteTask(selectedProjectName, task.Title);
            LoadTasks();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing task: {ex.Message}";
        }
    }

    private void ShowAddMembersModal()
    {
        if (!string.IsNullOrEmpty(selectedProjectName))
        {
            showAddMembersModal = true;
            var users = _UserController.GetAllUsers();
            var Members = new List<UserDTO>();
            foreach (var user in users)
            {
                if (user.Roles.Contains(RolDTO.ProjectMember))
                {
                    Members.Add(user);
                }
            }

            membersList = Members;
        }
        else
        {
            errorMessage = "Please select a project to add members.";
        }
    }

    private void CloseAddMembersModal(bool refreshData)
    {
        showAddMembersModal = false;
        selectedEmails.Clear();
    }

    private void ToggleMemberSelection(ChangeEventArgs e, string email)
    {
        if (e.Value is bool isSelected)
        {
            if (isSelected)
            {
                selectedEmails.Add(email);
            }
            else
            {
                selectedEmails.Remove(email);
            }
        }
    }

    private void AddSelectedMembers()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedProjectName))
            {
                memberErrorMessage = "No project selected";
                return;
            }

            var selectedMembers = membersList
                .Where(m => selectedEmails.Contains(m.Email))
                .DistinctBy(m => m.Email)
                .ToList();

            if (selectedMembers.Any())
            {
                _AdminProjectController.AssignMembersToProject(selectedProjectName, selectedMembers);
                memberSuccessMessage = "Members added successfully!";
                memberErrorMessage = string.Empty;

                selectedEmails.Clear();

                LoadProjectMembers();
            }
            else
            {
                memberErrorMessage = "No members selected.";
                memberSuccessMessage = string.Empty;
            }
        }
        catch (Exception ex)
        {
            memberErrorMessage = $"Error adding members: {ex.Message}";
            memberSuccessMessage = string.Empty;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ShowTaskListModal()
    {
        if (!string.IsNullOrEmpty(selectedProjectName))
        {
            LoadTasks();
            showTaskListModal = true;
        }
        else
        {
            errorMessage = "Please select a project to view the task list.";
        }
    }

    private void CloseTaskListModal(bool refreshData)
    {
        showTaskListModal = false;
        if (refreshData)
        {
            LoadTasks();
        }
    }

    private void ShowMemberListModal()
    {
        LoadProjectMembers();
        showMemberListModal = true;
    }

    private void CloseMemberListModal()
    {
        showMemberListModal = false;
    }

    private void LoadProjectMembers()
    {
        try
        {
            projectMembers = _AdminProjectController.GetAllMembersOfAProject(selectedProjectName);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading members: {ex.Message}";
        }
    }

    private void RemoveMember(UserDTO member)
    {
        try
        {
            _AdminProjectController.RemoveMemberFromProject(selectedProjectName, member.Email);
            projectMembers.Remove(member);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error removing member: {ex.Message}";
        }
    }

    private void ShowAssignTaskModal(UserDTO member)
    {
        showMemberListModal = false;
        selectedMemberId = member.Email;
        selectedMemberName = $"{member.FirstName} {member.LastName}";
        try
        {
            if (string.IsNullOrEmpty(selectedProjectName) || string.IsNullOrEmpty(selectedMemberId))
                throw new Exception("Project name or member ID is null.");

            LoadTasks();
            assignedTasks = _AdminProjectController
                .GetAllTaskForAMemberInAProject(selectedProjectName, selectedMemberId);
            if (assignedTasks == null)
                assignedTasks = new List<TaskDTO>();

            assignTaskErrorMessage = string.Empty;
            assignTaskSuccessMessage = string.Empty;
            showAssignTaskToMemberModal = true;
        }
        catch (Exception ex)
        {
            assignTaskErrorMessage = $"Error loading tasks: {ex.Message}\n{ex.StackTrace}";
            showAssignTaskToMemberModal = true;
        }
    }


    private void CloseAssignTaskToMemberModal(bool refreshData)
    {
        showAssignTaskToMemberModal = false;
        if (refreshData)
        {
            LoadProjectMembers();
        }
    }

    private void AssignTaskToMember(TaskDTO task)
    {
        try
        {
            _AdminProjectController.AddTaskToMember(selectedProjectName, selectedMemberId, task.Title);
            assignTaskSuccessMessage = $"Task '{task.Title}' assigned successfully";
            assignTaskErrorMessage = string.Empty;

            assignedTasks = _AdminProjectController.GetAllTaskForAMemberInAProject(selectedProjectName, selectedMemberId);
        }
        catch (Exception ex)
        {
            assignTaskErrorMessage = $"Error assigning task: {ex.Message}";
            assignTaskSuccessMessage = string.Empty;
        }
    }

    private void RemoveTaskFromMember(TaskDTO task)
    {
        try
        {
            _AdminProjectController.RemoveTaskFromMember(selectedProjectName, selectedMemberId, task.Title);
            assignTaskSuccessMessage = $"Task '{task.Title}' removed successfully";
            assignTaskErrorMessage = string.Empty;

            assignedTasks = _AdminProjectController.GetAllTaskForAMemberInAProject(selectedProjectName, selectedMemberId);
        }
        catch (Exception ex)
        {
            assignTaskErrorMessage = $"Error removing task: {ex.Message}";
            assignTaskSuccessMessage = string.Empty;
        }
    }

    private void ShowEditProjectModal(ProjectDTO project)
    {
        try
        {
            selectedProjectToEdit = new ProjectDTO
            {
                Id = project.Id,
                Name = project.Name,
                Description = project.Description,
                StartDate = project.StartDate,
                ProjectLeader = project.ProjectLeader != null ? _UserController.GetUser(project.ProjectLeader.Email) : null,
                Members = project.Members,
                AdminProyect = project.AdminProyect,
                Tasks = project.Tasks
            };

            currentProjectLeaderEmail = project.ProjectLeader?.Email ?? string.Empty;
            selectedProjectLeaderEmail = string.Empty;

            LoadUsers();

            projectErrorMessage = string.Empty;
            showEditProjectModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            projectErrorMessage = $"Error loading project for editing: {ex.Message}";
            showEditProjectModal = false;
        }
    }

    private void CloseEditProjectModal(bool refreshData)
    {
        showEditProjectModal = false;
        selectedProjectLeaderEmail = string.Empty;
        if (refreshData)
        {
            LoadProjects();
        }
    }

    private void RemoveCurrentLeader()
    {
        try
        {
            _AdminProjectController.RemoveProjectLeaderFromProject(selectedProjectToEdit.Name);

            currentProjectLeaderEmail = string.Empty;
            selectedProjectLeaderEmail = string.Empty;

            StateHasChanged();

            projectErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            projectErrorMessage = $"Error removing project leader: {ex.Message}";
        }
    }

    private void AssignSelectedLeader()
    {
        try
        {
            if (string.IsNullOrEmpty(selectedProjectLeaderEmail))
            {
                projectErrorMessage = "Please select a project leader.";
                return;
            }

            _AdminProjectController.SetProjectLeaderToProject(selectedProjectToEdit.Name, selectedProjectLeaderEmail);

            currentProjectLeaderEmail = selectedProjectLeaderEmail;
            selectedProjectLeaderEmail = string.Empty;

            StateHasChanged();

            projectErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            projectErrorMessage = $"Error assigning project leader: {ex.Message}";
        }
    }

    private string GetLeaderDisplayName(string email)
    {
        if (string.IsNullOrEmpty(email))
            return "No leader assigned";

        var user = projectLeadersUsers?.FirstOrDefault(u => u.Email == email);
        return user != null ? $"{user.FirstName} {user.LastName}" : email;
    }

    private async Task HandleEditProjectSubmit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(selectedProjectToEdit.Name))
            {
                projectErrorMessage = "Project name is required.";
                return;
            }

            _AdminProjectController.UpdateProject(selectedProjectToEdit.Name, selectedProjectToEdit);

            projectErrorMessage = string.Empty;
            showEditProjectModal = false;
            LoadProjects();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            projectErrorMessage = $"Error updating project: {ex.Message}";
        }
    }

    private void LoadUsers()
    {
        try
        {
            projectLeadersUsers = _AdminProjectController.GetAllProjectLeaderUsers();
        }
        catch (Exception ex)
        {
            projectErrorMessage = $"Error loading users: {ex.Message}";
        }
    }

}