@page "/users/delete"
@using Controllers
@using Service.Models
@inject NavigationManager Navigation
@inject AdminSystemController _AdminSystemController
@inject UserController _UserController
@inject LoginController _LoginController
@rendermode InteractiveServer

<link href="styles/styleDeleteUser.css" rel="stylesheet"/>

<div class="delete-user-container">
    <h3>Delete User</h3>

    <div class="form-group">
        <label for="userSelect">Select a User to Delete</label>
        <select id="userSelect" class="form-control mt-1" @bind="selectedUserEmail">
            <option value="">-- Select a User --</option>
            @foreach (var user in usersList)
            {
                <option value="@user.Email">@user.FirstName @user.LastName</option>
            }
        </select>
    </div>

    <div class="form-group mt-3">
        <button type="button" class="btn btn-danger" @onclick="ShowDeleteConfirmation"
                disabled="@(string.IsNullOrEmpty(selectedUserEmail))">
            Delete User
        </button>
    </div>

    @if (showConfirmation && userToDelete != null)
    {
        <div class="confirmation-dialog">
            <div class="confirmation-content">
                <h4>Confirm Deletion</h4>
                <p>Are you sure you want to delete the user @userToDelete.FirstName @userToDelete.LastName?</p>
                <p>This action cannot be undone.</p>
                <div class="confirmation-buttons">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(deleteError))
    {
        <div class="alert alert-danger mt-3">
            <strong>Error: </strong>@deleteError
            <button type="button" class="close" @onclick="ToggleAlertVisibility">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
    @if (!string.IsNullOrEmpty(deleteSuccess))
    {
        <div class="alert alert-success mt-3">
            <strong>Success: </strong>@deleteSuccess
            <button type="button" class="close" @onclick="ToggleAlertVisibility">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }

</div>

@code {
    private List<UserDTO> usersList = new();
    private string selectedUserEmail = "";
    private string deleteError = "";
    private string deleteSuccess = "";
    private bool showConfirmation;
    private UserDTO userToDelete;

    protected override void OnInitialized()
    {
        try
        {
            usersList = _UserController.GetAllUsers();

            if (usersList == null || !usersList.Any())
            {
                deleteError = "No users found. The user list may be empty or you may not have permission to view users.";
                usersList = new List<UserDTO>();
            }
        }
        catch (Exception ex)
        {
            deleteError = $"Error loading users: {ex.Message}";
            usersList = new List<UserDTO>();
        }
    }

    private void ShowDeleteConfirmation()
    {
        deleteError = "";
        deleteSuccess = "";

        if (string.IsNullOrEmpty(selectedUserEmail))
        {
            deleteError = "Please select a user to delete.";
            return;
        }

        userToDelete = usersList.FirstOrDefault(u => u.Email == selectedUserEmail);

        if (userToDelete == null)
        {
            deleteError = "User not found.";
            return;
        }

        showConfirmation = true;
    }

    private void CancelDelete()
    {
        showConfirmation = false;
        userToDelete = null;
    }

    private void ConfirmDelete()
    {
        if (userToDelete == null)
        {
            deleteError = "User selection error.";
            showConfirmation = false;
            return;
        }

        try
        {
            showConfirmation = false;

            _AdminSystemController.DeleteUser(userToDelete);
            deleteSuccess = $"User {userToDelete.FirstName} {userToDelete.LastName} has been deleted successfully.";
            if (userToDelete.Email == _LoginController.GetLoggedUser().Email)
            {
                _LoginController.Logout();
                Navigation.NavigateTo("/login", true);
                return;
            }

            usersList = _UserController.GetAllUsers();
            selectedUserEmail = "";
        }
        catch (Exception ex)
        {
            deleteError = $"An error occurred: {ex.Message}";
        }

        userToDelete = null;
    }

    private void ToggleAlertVisibility()
    {
        deleteError = "";
        deleteSuccess = "";
    }


}
