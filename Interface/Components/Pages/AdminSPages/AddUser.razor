@page "/users/create"
@using Controllers
@using Service.Models
@inject NavigationManager Navigation
@inject AdminSystemController _AdminSystemController
@rendermode InteractiveServer

<link href="styles/styleAddUser.css" rel="stylesheet"/>

<div class="login-container">
    <h3 class="login-title">Add User</h3>

    <EditForm Model="_userDto" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText id="firstName" class="form-control mt-1" @bind-Value="_userDto.FirstName" required/>
        </div>

        <div class="form-group mt-3">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" class="form-control mt-1" @bind-Value="_userDto.LastName" required/>
        </div>

        <div class="form-group mt-3">
            <label for="email">Email</label>
            <InputText id="email" class="form-control mt-1" @bind-Value="_userDto.Email" required/>
        </div>

        <div class="form-group mt-3">
            <label for="dob">Date of Birth</label>
            <InputDate id="dob" class="form-control mt-1" @bind-Value="_userDto.Birthday" required/>
        </div>

        <div class="form-group mt-3">
            <label for="password">Password</label>
            <div class="input-password-wrapper">
                <InputText id="password"
                           type="@passwordInputType"
                           class="form-control mt-1"
                           @bind-Value="_userDto.Password" required/>
                <button type="button" @onclick="TogglePasswordVisibility" class="btn-eye">
                    <i class="@passwordEyeIcon"></i>
                </button>
            </div>
        </div>

        <div class="form-group mt-3">
            <label for="confirmPassword">Confirm Password</label>
            <div class="input-password-wrapper">
                <InputText id="confirmPassword"
                           type="@confirmPasswordInputType"
                           class="form-control mt-1"
                           @bind-Value="confirmPassword" required/>
                <button type="button" @onclick="ToggleConfirmPasswordVisibility" class="btn-eye">
                    <i class="@confirmPasswordEyeIcon"></i>
                </button>
            </div>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Create User</button>
    </EditForm>

    @if (alertVisible)
    {
        <div class="alert alert-danger mt-3">
            <strong>Error: </strong>@alertMessage
            <button type="button" class="close" @onclick="ToggleAlertVisibility">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }

    @if (successVisible)
    {
        <div class="alert alert-success mt-3">
            <strong>Success: </strong>@successMessage
            <button type="button" class="close" @onclick="ToggleAlertVisibility">
                <i class="fas fa-times"></i>
            </button>
        </div>
    }
</div>

@code {
    private UserDTO _userDto = new();
    private string confirmPassword;
    private bool alertVisible;
    private string alertMessage = string.Empty;
    private bool successVisible;
    private string successMessage = string.Empty;

    private string passwordInputType = "password";
    private string passwordEyeIcon = "fas fa-eye-slash";
    private string confirmPasswordInputType = "password";
    private string confirmPasswordEyeIcon = "fas fa-eye-slash";

    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == "password" ? "text" : "password";
        passwordEyeIcon = passwordInputType == "text" ? "fas fa-eye" : "fas fa-eye-slash";
    }

    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordInputType = confirmPasswordInputType == "password" ? "text" : "password";
        confirmPasswordEyeIcon = confirmPasswordInputType == "text" ? "fas fa-eye" : "fas fa-eye-slash";
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _userDto = new UserDTO
        {
            FirstName = "",
            LastName = "",
            Email = "",
            Password = "",
            Birthday = DateTime.Now,
            Roles = new List<RolDTO>()
        };
    }

    private async void HandleValidSubmit()
    {
        try
        {
            if (confirmPassword != _userDto.Password)
            {
                alertMessage = "Password and Confirm Password do not match.";
                alertVisible = true;
                return;
            }

            _AdminSystemController.CreateUser(_userDto);
            successMessage = "User created successfully!";
            successVisible = true;
            alertVisible = false;
            await Task.Delay(1500);
            ClearAllInputs();
        }
        catch (Exception ex)
        {
            alertMessage = $"An error occurred: {ex.Message}";
            alertVisible = true;
            successVisible = false;
        }
    }

    private void ToggleAlertVisibility()
    {
        alertVisible = false;
        successVisible = false;
    }

    private void ClearAllInputs()
    {
        _userDto = new UserDTO
        {
            FirstName = "",
            LastName = "",
            Email = "",
            Password = "",
            Birthday = DateTime.Now,
            Roles = new List<RolDTO>()
        };

        confirmPassword = "";

        passwordInputType = "password";
        passwordEyeIcon = "fas fa-eye-slash";
        confirmPasswordInputType = "password";
        confirmPasswordEyeIcon = "fas fa-eye-slash";

        alertVisible = false;
        successVisible = false;

        StateHasChanged();
    }


}
