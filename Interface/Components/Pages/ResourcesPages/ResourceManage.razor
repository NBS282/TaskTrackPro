@page "/resources/manage"
@using Controllers
@using Service.Models
@inject ResourceController _ResourceController
@rendermode InteractiveServer

<link href="styles/styleManageResources.css" rel="stylesheet"/>

<div class="manage-resources-container">
    <h3 class="manage-resources-title">Manage Resources</h3>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            <strong>Success!</strong> @successMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                    @onclick="ClearMessages"></button>
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            <strong>Oops!</strong> @errorMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"
                    @onclick="ClearMessages"></button>
        </div>
    }
    <p>Click on a resource to edit:</p>


    <div>
        @foreach (var resource in resourcesList)
        {
            <div class="resource-item d-flex justify-content-between align-items-center">
                <span>@resource.Name (@resource.Type)</span>
                <div>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditResource(resource)">Edit</button>
                </div>
            </div>
        }
    </div>
</div>

@if (showEditModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-labelledby="editResourceModal"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Resource</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@editingResource" OnValidSubmit="HandleEditSubmit">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="resourceName" class="form-label">Name</label>
                            <InputText id="resourceName" class="form-control" @bind-Value="editingResource.Name"
                                       required/>
                        </div>

                        <div class="mb-3">
                            <label for="resourceType" class="form-label">Type</label>
                            <InputText id="resourceType" class="form-control" @bind-Value="editingResource.Type"
                                       required/>
                        </div>

                        <div class="mb-3">
                            <label for="resourceDescription" class="form-label">Description</label>
                            <InputTextArea id="resourceDescription" class="form-control"
                                           @bind-Value="editingResource.Description" required/>
                        </div>

                        <button type="submit" class="btn btn-success">Save Changes</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}




@code {
    private List<ResourceDTO> resourcesList = new();
    private ResourceDTO editingResource;
    private bool showEditModal;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        LoadResources();
    }

    private void LoadResources()
    {
        try
        {
            resourcesList = _ResourceController.GetAllResources();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading resources: {ex.Message}";
        }
    }

    private void EditResource(ResourceDTO resource)
    {
        editingResource = new ResourceDTO
        {
            Id = resource.Id,
            Name = resource.Name,
            Type = resource.Type,
            Description = resource.Description
        };
        showEditModal = true;
    }

    private void HandleEditSubmit()
    {
        try
        {
            _ResourceController.UpdateResource(editingResource.Id, editingResource);
            successMessage = $"The resource \"{editingResource.Name}\" was updated successfully.";
            LoadResources();
            CloseEditModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"Could not update the resource \"{editingResource?.Name}\". Details: {ex.Message}";
        }
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingResource = null;
    }

    private void ClearMessages()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

}
