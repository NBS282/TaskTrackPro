@using Service
@using Service.Models
@inject NotificationService NotificationService
@inject Login LoginService
@inject NavigationManager NavManager
@rendermode InteractiveServer

<link href="styles/styleNotificationBell.css" rel="stylesheet"/>
<div class="notification-bell">
    <button @onclick="ToggleNotifications">
        <i class="bi bi-bell"></i>
        @if (unreadCount > 0)
        {
            <span class="badge bg-danger">@unreadCount</span>
        }
    </button>

    @if (isNotificationsVisible)
    {
        <div class="notifications-dropdown">
            @if (notifications.Any())
            {
                <ul>
                    @foreach (var notification in notifications)
                    {
                        <li>
                            <div>
                                <p>@notification.Description</p>
                                @if (!notification.Read.GetValueOrDefault())
                                {
                                    <button @onclick="() => MarkAsRead(notification.Id)">Visto</button>
                                }
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="no-notifications">No hay notificaciones pendientes</p>
            }
        </div>
    }
</div>

@code {
    private bool isNotificationsVisible;
    private List<NotificationDTO> notifications = new();
    private int unreadCount => notifications.Count(n => !n.Read.GetValueOrDefault());

    protected override void OnInitialized()
    {
        LoadNotifications();
        NavManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        LoadNotifications();
        InvokeAsync(StateHasChanged);
    }

    private void LoadNotifications()
    {
        try
        {
            var loggedUser = LoginService.GetLoggedUser();
            if (loggedUser != null)
            {
                notifications = NotificationService.GetNotificationsForUser(loggedUser.Email);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar notificaciones: {ex.Message}");
            notifications = new List<NotificationDTO>();
        }
    }

    private void ToggleNotifications()
    {
        isNotificationsVisible = !isNotificationsVisible;
    }

    private void MarkAsRead(int? notificationId)
    {
        try
        {
            var loggedUser = LoginService.GetLoggedUser();
            if (loggedUser != null)
            {
                NotificationService.RemoveNotificationFromUser(loggedUser.Email, notificationId);
                LoadNotifications();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al marcar notificación como leída: {ex.Message}");
        }
    }

}
